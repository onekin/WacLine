---
analytics:
  - expression: Hypothesis
    vps:
      - &vp1
        relativepath: "app/scripts/annotationServer/hypothesis/HypothesisClientInterface.js"
        anchor: |
          }, (result) => {
            if (_.has(result, 'error')) {
              [*GA_INJECT*]
              callback(result.error)
            } else {
              callback(null, result)
    events:
      - name: "errorInHypothesis"
        vps:
          - *vp1
  - expression: SidebarNavigation or Canvas or LastAnnotation
    vps:
      - &vp1
        relativepath: "app/scripts/codebook/operations/read/ReadCodebook.js"
        anchor: |
          })
            } else {
              // Else navigate to annotation
              [*GA_INJECT*]
              LanguageUtils.dispatchCustomEvent(Events.navigateToAnnotationByCode, {
                codeId: theme.id
              })
            }
      - &vp2
        relativepath: "app/scripts/codebook/operations/read/ReadCodebook.js"
        anchor: |
          } else {
            // Else navigate to annotation
            [*GA_INJECT*]
            LanguageUtils.dispatchCustomEvent(Events.navigateToAnnotationByCode, {
              codeId: code.id
            })
          }
      - &vp3
        relativepath: "app/scripts/codebook/operations/read/ReadCodebook.js"
        anchor: |
          })
            } else {
              // Else navigate to annotation
              [*GA_INJECT*]
              LanguageUtils.dispatchCustomEvent(Events.navigateToAnnotationByCode, {
                codeId: theme.id
              })
            }
      - &vp4
        relativepath: "app/scripts/annotationManagement/read/Canvas.js"
        anchor: |
          class Canvas {
            static generateCanvas () {
              [*GA_INJECT*]
              window.abwa.sidebar.closeSidebar()
              let review = null
      - &vp5
        relativepath: "app/scripts/annotationManagement/read/Resume.js"
        anchor: |
          if (window.abwa.annotationManagement.annotationReader.allAnnotations.length > 0) {
            window.abwa.annotationManagement.goToAnnotation(window.abwa.annotationManagement.annotationReader.allAnnotations.reduce(
              (max, a) => a.modified > max.modified ? a : max)
              [*GA_INJECT*]
            )
          }
    events:
      - name: "SidebarNavigationUsed"
        vps:
          - *vp1
          - *vp2
          - *vp3
      - name: "CanvasUsed"
        vps:
          - *vp4
      - name: "LastAnnotationUsed"
        vps:
          - *vp5
  - expression: Canvas
    vps:
      - &vp1
        relativepath: "app/scripts/annotationManagement/read/Canvas.js"
        anchor: |
          document.querySelector('#canvasCloseButton').addEventListener('click', function () {
            document.querySelector('#reviewCanvas').parentNode.removeChild(document.querySelector('#reviewCanvas'))
            document.querySelector('#abwaSidebarButton').style.display = 'block'
            [*GA_INJECT*]
          })
      - &vp2
        relativepath: "app/scripts/annotationManagement/read/Canvas.js"
        anchor: |
          document.addEventListener('keydown', function (e) {
            if (e.code === 'Escape' && document.querySelector('#reviewCanvas') != null) document.querySelector('#reviewCanvas').parentNode.removeChild(document.querySelector('#reviewCanvas'))
            document.querySelector('#abwaSidebarButton').style.display = 'block'
            [*GA_INJECT*]
          })
      - &vp3
        relativepath: "app/scripts/annotationManagement/read/Canvas.js"
        anchor: |
          const canvasContainer = document.querySelector('#canvasContainer')
            document.querySelector('#canvasOverlay').addEventListener('click', function () {
              document.querySelector('#reviewCanvas').parentNode.removeChild(document.querySelector('#reviewCanvas'))
              document.querySelector('#abwaSidebarButton').style.display = 'block'
              [*GA_INJECT*]
            })
    events:
      - name: "closeCanvasFromExitButton"
        vps:
          - *vp1
      - name: "closeCanvasFromESCKey"
        vps:
          - *vp2
      - name: "closeCanvasFromClickingBackdrop"
          vps:
            - *vp3
  - expression: Commenting
      vps:
        - &vp1
        ccm_filename: "ReadAnnotation.js"
        relativepath: "app/scripts/annotationManagement/read/ReadAnnotation.js"
        anchor: |
          // Open commenting form if you are the owner of the annotation, otherwise should be replace
          if (annotationCreator === window.abwa.groupSelector.user.userid) {
            this.openCommentingForm(annotation)
            [*GA_INJECT*]
          } /* PVSCL:IFCOND(Replying) */ else {
        - &vp2
          relativepath: "app/scripts/annotationManagement/read/ReadAnnotation.js"
          anchor: |
            }/* PVSCL:ENDCOND *//* PVSCL:IFCOND(Commenting) */ else if (key === 'comment') {
              // Open commenting form
              [*GA_INJECT*]
              this.openCommentingForm(annotation)
            } /* PVSCL:ENDCOND */
            },
        - &vp3
          relativepath: "app/scripts/annotationManagement/read/ReadAnnotation.js"
          anchor: |
            LanguageUtils.dispatchCustomEvent(Events.updateAnnotation, {
              annotation: annotation
            })[*GA_INJECT*]
            }
            })
            }

            // PVSCL:ENDCOND
      events:
        - name: "openCommentingFromDoubleClick"
          vps:
            - *vp1
        - name: "openCommentingFromContextMenu"
          vps:
            - *vp2
        - name: "CommentHasBeenMade"
            vps:
            - *vp3
  - expression: SuggestedLiterature
      vps:
        - &vp1
        relativepath: "app/scripts/annotationManagement/purposes/CommentingForm.js"
        anchor: |
          const li = document.createElement('li')
                    $(li).append(a, '<span title="' + content + '">' + content + '</span>')
                    $('#literatureList').append(li)
                    [*GA_INJECT*]
                    setTimeout(function () {
                      $('#swal-input1').val('')
        events:
          - name: "addedSuggestedLiterature"
            vps:
              - *vp1
  - expression: SentimentAnalysis
      vps:
        - &vp1
        relativepath: "app/scripts/annotationManagement/purposes/CommentingForm.js"
        anchor: |
          confirmButtonText: 'Save as it is',
            reverseButtons: true,
            callback: callback,
            cancelCallback: () => {
              [*GA_INJECT*]
              showForm(preConfirmData)
            }
          })
        - &vp2
            relativepath: "app/scripts/annotationManagement/purposes/CommentingForm.js"
            anchor: |
              .then((isOffensive) => {
                if (isOffensive) {
                  // The comment is negative or offensive
                  [*GA_INJECT*]
                  Alerts.confirmAlert({
                    text: 'The message may be ofensive. Please modify it.',
                    showCancelButton: true,
                    cancelButtonText: 'Modify comment',
        events:
          - name: "SentimentAnalysisIgnored"
            vps:
              - *vp1
          - name: "SentimentAnalysisSuggested"
            vps:
              - *vp2
